name: merge-pr

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    timeout-minutes: 2

    outputs:
      has_plugin_change: ${{ steps.check-plugin.outputs.any_modified }}
      has_source_change: ${{ steps.check-source.outputs.any_modified }}

    steps:
      - uses: actions/checkout@v3.5.0
        with:
          fetch-depth: 2

      - name: Check for changes to plugin implementation
        id: check-plugin
        uses: tj-actions/changed-files@v35.7.6
        with:
          files: |
            addons/**/*
            tests/**/*

      - name: Check for changes to any 'GDScript' file
        id: check-source
        uses: tj-actions/changed-files@v35.7.6
        with:
          files: |
            **/*.gd

  check_source:
    needs: [detect_changes]
    if: needs.detect_changes.outputs.has_source_change

    runs-on: ubuntu-latest
    timeout-minutes: 4

    env:
      CONTINUE_ON_ERROR: ${{ github.event_name == 'pull_request' }}

    strategy:
      fail-fast: false # do not exit early
      matrix:
        version: [4.0] # TODO: make this derived from 'project.godot'

    steps:
      - uses: actions/checkout@v3.5.0
        with:
          # Checkout the "head_ref" (i.e. PR branch HEAD) in case a commit is
          # later needed. See https://github.com/stefanzweifel/git-auto-commit-action
          # for more details.
          ref: ${{ github.head_ref }}

      - name: Install the 'gdtoolkit' library
        shell: "bash"
        with:
          version: ./bin/install/gdtoolkit.sh latest

      - name: Check formatting (source)
        id: format-project
        continue-on-error: ${{ fromJSON(env.CONTINUE_ON_ERROR) }}
        run: gdformat -l 88 --check **/*.gd

      - name: Fix formatting (source)
        if: steps.format-project.outcome == 'failure'
        run: |
          gdformat -l 88 **/*.gd

          # See https://github.com/orgs/community/discussions/26560#discussioncomment-3531273
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          git add --all **/*.gd
          git commit -m "chore: fix GDScript formatting (on behalf of '${{ github.triggering_actor }}')"

          git push

  test_plugin:
    needs: [detect_changes]
    if: needs.detect_changes.outputs.has_plugin_change

    runs-on: ubuntu-latest
    timeout-minutes: 8

    strategy:
      fail-fast: false # do not exit early
      matrix:
        version: [4.0] # TODO: make this derived from 'project.godot'

    steps:
      - uses: actions/checkout@v3.5.0

      - name: Download the 'Godot' executable
        uses: "./.github/actions/setup-godot"
        with:
          version: ${{ matrix.version }}

      - name: Download the 'Gut' testing addon
        uses: "./.github/actions/setup-gut"
        with:
          version: latest

      - name: Cache the '.godot' import directory
        id: cache-imports
        uses: actions/cache@v3.3.1
        with:
          path: .godot
          key: imports-${{ runner.os }}-${{ matrix.version }}-${{ hashFiles('addons/**/*', 'examples/**/*', 'tests/**/*', 'project.godot') }}
          restore-keys: |
            imports-${{ runner.os }}-${{ matrix.version }}

      - name: Generate '.godot' import directory
        if: steps.cache-imports.outputs.cache-hit != 'true'
        shell: bash
        run: godot --headless -e -q

      - name: Test plugin source
        shell: bash
        run: |
          godot \
          --headless \
          --verbose \
          --path . \
          -s addons/gut/gut_cmdln.gd \
            -gdir=res://tests \
            -ginclude_subdirs \
            -gexit

  # used to ensure all branch protection requirements are met. This
  # is a workaround until https://github.com/github-community/community/discussions/4324
  # is addressed.
  branch_protection:
    needs: [check_source, test_plugin]
    if: ${{ always() }}

    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - name: Check 'check_source' status
        if: |
          always() &&
          needs.check_source.result == 'failure' ||
          needs.check_source.result == 'cancelled'
        run: exit 1
      - name: Check 'test_plugin' status
        if: |
          always() &&
          needs.test_plugin.result == 'failure' ||
          needs.test_plugin.result == 'cancelled'
        run: exit 1
